#pragma once
#include "common_headers.h"
#include "parameters.h"
#include "lattice.h"

class electron{
public:
	FeynWann& fw;
	lattice* latt;

	std::vector<vector3<>> k0;
	vector3<int> NkFine;
	double nkTot;

	double dmuMin, dmuMax, dmu, Tmax, nkBT, n_dmu;
	bool read_gfack, read_Bsok;
	vector3<> gfac_mean, gfac_sigma, gfac_cap;
	double pumpOmegaMax, pumpTau, probeOmegaMax;

	int band_skipped, nValence; bool assumeMetal, assumeMetal_scatt, useFinek_for_ERange, select_k_use_meff;
	double EBot_set, ETop_set, meff;
	bool read_kpts, read_erange_brange, read_kpts_2nd;

	bool eScattOnlyElec, eScattOnlyHole; //!< whether e-ph coupling is enabled

	bool writeU, layerOcc, writeHEz, save_dHePhSum_disk;

	double degthr;

	// ?Start and ?Stop are used most frequently and used as global variables in some subroutines
	// ?_probe for probe and can contain bands far from band edges; ?_eph for e-ph scattering; ?_dm for states related to density matrix change
	int bStart, bStop, bCBM, nBandsSel, bBot_eph, bTop_eph, bBot_dm, bTop_dm, bBot_probe, bTop_probe, bRef, nBandsSel_probe;
	double EvMax, EcMin, Emid; //VBM and CBM estimates, Emid is the energy in the middle of the gap
	double Estart, Estop, EBot_probe, ETop_probe, EBot_dm, ETop_dm, EBot_eph, ETop_eph; //energy range for k selection

	std::vector<vector3<>> k; //selected k-points
	std::vector<double> E; //all band energies for selected k-points
	                       //generated by Eloop function, so that B-filed can be introduced by B(L+2S) but cannot be from k-resolved g tensors in current version
	std::vector<FeynWann::StateE> state_elec;
	std::vector<matrix3<>> gfack; std::vector<vector3<>> Bsok;
	std::vector<diagMatrix> F;
	std::vector<std::vector<vector3<>>> bsq;

	// debug
	bool analyse_g2_E1E2fix;
	double E1fix, E2fix, thr_delta;

	electron(FeynWann& fw, lattice* latt, parameters* param)
		: fw(fw), latt(latt),
		dmuMin(param->dmuMin), dmuMax(param->dmuMax), dmu(dmuMax), Tmax(param->Tmax), nkBT(param->nkBT),
		n_dmu(param->carrier_density * latt->cminvdim2au()),
		read_Bsok(param->read_Bsok), read_gfack(param->read_gfack), gfac_mean(param->gfac_mean), gfac_sigma(param->gfac_sigma), gfac_cap(param->gfac_cap),
		pumpOmegaMax(param->pumpOmegaMax), pumpTau(param->pumpTau), probeOmegaMax(param->probeOmegaMax),
		band_skipped(param->band_skipped), assumeMetal(param->assumeMetal), assumeMetal_scatt(param->assumeMetal_scatt), useFinek_for_ERange(param->useFinek_for_ERange),
		select_k_use_meff(param->select_k_use_meff), meff(param->meff),
		EBot_set(param->EBot_set), ETop_set(param->ETop_set), read_kpts(param->read_kpts), read_erange_brange(param->read_erange_brange), read_kpts_2nd(param->read_kpts_2nd),
		eScattOnlyElec(param->eScattOnlyElec), eScattOnlyHole(param->eScattOnlyHole),
		writeU(param->writeU), layerOcc(param->layerOcc), writeHEz(param->writeHEz), save_dHePhSum_disk(param->save_dHePhSum_disk),
		degthr(param->degthr), analyse_g2_E1E2fix(param->analyse_g2_E1E2fix), E1fix(param->E1fix), E2fix(param->E2fix),
		thr_delta(std::max(param->ePhDelta * param->nEphDelta, param->scattDelta * param->nScattDelta)),
		nValence(int(round(fw.nElectrons / (fw.nSpins*fw.spinWeight))))
	{
		shole = eScattOnlyHole ? "_hole" : "";
		logPrintf("carrier_density = %lg a.u.\n", n_dmu);
		latt->print_carrier_density(n_dmu); logPrintf("\n"); logFlush();
		get_k_offsets(param->NkMult);
		read_gfac();
		read_Bso();
		fw.gfac = matrix3<>(gfac_mean[0], gfac_mean[1], gfac_mean[2]);
		if (fabs(nValence*fw.nSpins*fw.spinWeight - fw.nElectrons) > 1e-6) die("Number of electrons incompatible with semiconductor / insulator.\n");
	}

	//--------- k-point selection -------------
	void get_k_offsets(vector3<int> NkMult);

	void get_band_skipped();

	inline void eRange(const FeynWann::StateE& state);
	static void eRange(const FeynWann::StateE& state, void* params);

	inline void bSelect(const FeynWann::StateE& state);
	static void bSelect(const FeynWann::StateE& state, void* params);
	void bSelect_driver(const double& EBot, const double& ETop, int& bBot, int& bTop);

	inline void kSelect(const FeynWann::StateE& state);
	static void kSelect(const FeynWann::StateE& state, void* params);
	void kpointSelect(const std::vector<vector3<>>& k0);
	void kpointSelect_scatt();

	//--------- Save data -------------
	void saveR();
	void saveSize(parameters *param, size_t nkpairs = 0, double omegaMax = 0);
	void saveEk(string suffix = "");

	void generate_states_elec(std::vector<FeynWann::StateE>& states);
	void saveElec();

	void savekData(parameters *param, size_t nkpairs = 0, double omegaMax = 0);

	//--------- Analysis -------------
	std::vector<std::vector<vector3<>>> compute_bsq();
	void read_gfac();
	void read_Bso();
	void generate_gfac();
	void analyse_gfac();
	void set_mu(std::vector<double>& E);
	void set_mu(std::vector<FeynWann::StateE>& states);
	void report_density(std::vector<FeynWann::StateE>& states);
};